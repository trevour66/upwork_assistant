create table templates (
  template_id uuid not null default uuid_generate_v4() primary key,
  template_title text not null,
  template_icon_label text not null,
  template_inserted_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  template_updated_at timestamp with time zone default timezone ('utc'::text, now()) not null
);

alter table templates
  add column template_owner uuid not null references profiles(id) on delete cascade;

-- Set up Row Level Security (RLS)
alter table templates
  enable row level security;

create policy "Templates are viewable by everyone." on templates
  for select using (true);

create policy "Users can insert their own template." on templates
  for insert with check ((select auth.uid()) = template_owner);

create policy "Users can update own template." on templates
  for update using ((select auth.uid()) = template_owner);






  create table profiles (
  id uuid references auth.users not null primary key,
  inserted_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone ('utc'::text, now()) not null,
  email text unique,
  first_name text,
  last_name text,
  avatar_url text
);

-- Set up Row Level Security (RLS)
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, email) 
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ((select auth.uid()) = owner) with check (bucket_id = 'avatars');

